/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExtractedContent } from "./ExtractedContent";
import { ExtractedContentCountArgs } from "./ExtractedContentCountArgs";
import { ExtractedContentFindManyArgs } from "./ExtractedContentFindManyArgs";
import { ExtractedContentFindUniqueArgs } from "./ExtractedContentFindUniqueArgs";
import { CreateExtractedContentArgs } from "./CreateExtractedContentArgs";
import { UpdateExtractedContentArgs } from "./UpdateExtractedContentArgs";
import { DeleteExtractedContentArgs } from "./DeleteExtractedContentArgs";
import { Pdf } from "../../pdf/base/Pdf";
import { ExtractedContentService } from "../extractedContent.service";
@graphql.Resolver(() => ExtractedContent)
export class ExtractedContentResolverBase {
  constructor(protected readonly service: ExtractedContentService) {}

  async _extractedContentsMeta(
    @graphql.Args() args: ExtractedContentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExtractedContent])
  async extractedContents(
    @graphql.Args() args: ExtractedContentFindManyArgs
  ): Promise<ExtractedContent[]> {
    return this.service.extractedContents(args);
  }

  @graphql.Query(() => ExtractedContent, { nullable: true })
  async extractedContent(
    @graphql.Args() args: ExtractedContentFindUniqueArgs
  ): Promise<ExtractedContent | null> {
    const result = await this.service.extractedContent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExtractedContent)
  async createExtractedContent(
    @graphql.Args() args: CreateExtractedContentArgs
  ): Promise<ExtractedContent> {
    return await this.service.createExtractedContent({
      ...args,
      data: {
        ...args.data,

        pdf: args.data.pdf
          ? {
              connect: args.data.pdf,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ExtractedContent)
  async updateExtractedContent(
    @graphql.Args() args: UpdateExtractedContentArgs
  ): Promise<ExtractedContent | null> {
    try {
      return await this.service.updateExtractedContent({
        ...args,
        data: {
          ...args.data,

          pdf: args.data.pdf
            ? {
                connect: args.data.pdf,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExtractedContent)
  async deleteExtractedContent(
    @graphql.Args() args: DeleteExtractedContentArgs
  ): Promise<ExtractedContent | null> {
    try {
      return await this.service.deleteExtractedContent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Pdf, {
    nullable: true,
    name: "pdf",
  })
  async getPdf(
    @graphql.Parent() parent: ExtractedContent
  ): Promise<Pdf | null> {
    const result = await this.service.getPdf(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
