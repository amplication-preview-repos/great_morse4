/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ExtractedContent as PrismaExtractedContent,
  Pdf as PrismaPdf,
} from "@prisma/client";

export class ExtractedContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExtractedContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.extractedContent.count(args);
  }

  async extractedContents(
    args: Prisma.ExtractedContentFindManyArgs
  ): Promise<PrismaExtractedContent[]> {
    return this.prisma.extractedContent.findMany(args);
  }
  async extractedContent(
    args: Prisma.ExtractedContentFindUniqueArgs
  ): Promise<PrismaExtractedContent | null> {
    return this.prisma.extractedContent.findUnique(args);
  }
  async createExtractedContent(
    args: Prisma.ExtractedContentCreateArgs
  ): Promise<PrismaExtractedContent> {
    return this.prisma.extractedContent.create(args);
  }
  async updateExtractedContent(
    args: Prisma.ExtractedContentUpdateArgs
  ): Promise<PrismaExtractedContent> {
    return this.prisma.extractedContent.update(args);
  }
  async deleteExtractedContent(
    args: Prisma.ExtractedContentDeleteArgs
  ): Promise<PrismaExtractedContent> {
    return this.prisma.extractedContent.delete(args);
  }

  async getPdf(parentId: string): Promise<PrismaPdf | null> {
    return this.prisma.extractedContent
      .findUnique({
        where: { id: parentId },
      })
      .pdf();
  }
}
